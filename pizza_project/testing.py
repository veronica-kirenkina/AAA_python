import pytest
import random
from pizza import Pizza, Margherita, Pepperoni, Hawaiian
from services import bake, deliver, pickup
from cli import order, menu
from click.testing import CliRunner


def test_equality():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏—Ü—Ü –Ω–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ/
    –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ –º–µ—Ç–æ–¥–∞ __eq__
    :return: None
    """
    assert Hawaiian() == Hawaiian()
    assert Hawaiian(size='XL') != Hawaiian(size='L')
    assert Hawaiian() != Pepperoni()


def test_pizza_dict():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ dict
    :return: None
    """
    assert Pizza().dict() == {None: 'tomato sauce, mozzarella'}
    assert Margherita().dict() == {'Margherita üßÄ': 'tomato sauce, mozzarella, tomatoes'}
    assert Pepperoni().dict() == {'Pepperoni üçï': 'tomato sauce, mozzarella, pepperoni'}
    assert Hawaiian().dict() == {'Hawaiian üçç': 'tomato sauce, mozzarella, chicken, pineapples'}
    assert Margherita().__class__.__name__ != str(*Hawaiian().dict().keys())


def test_size_exceptions():
    """
    –ü—Ä–æ–≤–µ–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—ã–∑–æ–≤–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –≤–≤–æ–¥–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–∏—Ü—Ü—ã
    :return: None
    """
    with pytest.raises(ValueError):
        Pizza(size='l')
    with pytest.raises(ValueError):
        Pizza(size=30)


def test_with_decorator():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π —É—Å–ª—É–≥
    :return: None
    """
    assert deliver(Margherita()) is None
    assert pickup(Margherita()) is None


def test_bake(capsys):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ bake –≤–º–µ—Å—Ç–µ —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º
    :return: None
    """
    random.seed(42)
    bake(Margherita())
    out = capsys.readouterr().out.split("\n")
    assert out[0] == 'bake - 2c!'


def test_deliver(capsys):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ deliver –≤–º–µ—Å—Ç–µ —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º
    :return: None
    """
    result = deliver(Margherita())
    out, err = capsys.readouterr().out.split("\n")
    assert result is None
    assert out.startswith("üõµ –¥–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞")


def test_pickup(capsys):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ pickup –≤–º–µ—Å—Ç–µ —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º
    :return: None
    """
    result = pickup(Margherita())
    out, err = capsys.readouterr().out.split("\n")
    assert result is None
    assert out.startswith("üè† –∑–∞–±—Ä–∞–ª–∏ –∑–∞")


def test_menu():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤—ã–≤–æ–¥–∏–º–æ–≥–æ –º–µ–Ω—é
    :return: None
    """
    runner = CliRunner()
    result = runner.invoke(menu)
    assert result.output == "- Margherita üßÄ: tomato sauce, mozzarella, tomatoes\n" \
                            "- Pepperoni üçï: tomato sauce, mozzarella, pepperoni\n" \
                            "- Hawaiian üçç: tomato sauce, mozzarella, chicken, pineapples\n"


def test_invalid_order():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ –ø–∏—Ü—Ü—ã
    :return: None
    """
    runner = CliRunner()
    result = runner.invoke(order, ["margarita"])
    assert result.output.strip() == ''


def test_order_no_delivery_flag():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∑–∞–∫–∞–∑–∞ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ–ª–∞–≥–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    :return: None
    """
    runner = CliRunner()
    result = runner.invoke(order, ["pepperoni"])
    assert " –∑–∞–±—Ä–∞–ª–∏ –∑–∞" in result.output.strip()


def test_order_no_delivery_flag():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∑–∞–∫–∞–∑–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ–ª–∞–≥–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    :return: None
    """
    runner = CliRunner()
    result = runner.invoke(order, ["pepperoni", "--delivery"])
    assert " –¥–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞" in result.output.strip()
